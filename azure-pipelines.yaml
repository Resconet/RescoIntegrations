name: $(Date:yyMMdd)$(rev:-r)

trigger:
  batch: true
  branches:
    include:
      - master
  tags:
    include:
      - "*"

variables:
  PublishArtifact: $[ne(variables['Build.Reason'], 'PullRequest')]
  Revision: $[counter(replace(variables['Build.Reason'], 'Manual', 'BatchedCI'), 1)]

# https://marketplace.visualstudio.com/items?itemName=Hodor.hodor-alops
jobs:
- job: build_resco_integrations
  displayName: Build Resco Integrations
  pool:
    vmImage: windows-latest
  variables:
  - group: Docker Connection
  steps:
  - checkout: self
    fetchDepth: 1

  - pwsh: |
      if ("$(Build.SourceBranch)".StartsWith("refs/tags/")) {
        $VersionMatch = "$(Build.SourceBranch)".Substring(10) | Select-String -Pattern "([0-9`.]+)(-.*)?"
        if (-not $VersionMatch.Matches.Success) {
          Write-Host "##[error]Wrong tag format"
          Exit 1
        }
        $Version = $VersionMatch.Matches.Groups[1].Value
      } else {
        $App = Get-Content app.json | ConvertFrom-Json
        $Version = $App.version.Substring(0, $App.version.LastIndexOf('.'))
      }
      $AppVersion = $Version + ".$(Revision)"
      Write-Host "App version: $AppVersion"
      Write-Host "##vso[task.setvariable variable=AppVersion;isOutput=true]$AppVersion"
    displayName: Set Up App Version
    name: setup

  - task: ALOpsDockerCreate@1
    displayName: Create Docker Image
    inputs:
      artifacttype: Sandbox
      imageprefix: resco.integrations
      imagenametemplate: '%IMAGE_PREFIX%.%ARTIFACT_TYPE%:%ARTIFACT_VERSION%-%ARTIFACT_COUNTRY%-%OS_VERSION%-%OS_LTSC%'
      dockerregistry: rescocloud.azurecr.io
      dockerusername: $(rescocloud-registry-username)
      dockerpassword: $(rescocloud-registry-password)

  - task: ALOpsDockerStart@1
    displayName: Start Docker Container
    inputs:
      docker_image: $(ALOPS_BC_IMAGE)
      docker_pull: false

  - task: ALOpsDockerWait@1
    displayName: Wait for Connections
    inputs:
      search_string: Ready for connections!

  - task: ALOpsAppCompiler@1
    displayName: Build App
    inputs:
      usedocker: true
      nav_app_version: $(setup.AppVersion)
      publish_artifact: $(PublishArtifact)
      failed_on_warnings: true
      updatebuildnumber: false
      output_alc_logs: false

  - task: ALOpsDockerRemove@1
    displayName: Start Docker Container
    condition: always()

  - pwsh: |
      Write-Host "Remove unwanted build tags"
      $Tags = az pipelines build tag list --build-id $(Build.BuildId) --org $(System.CollectionUri) -p $(System.TeamProject) | ConvertFrom-Json
      $Tags | ForEach-Object { az pipelines build tag delete --tag $_ --build-id $(Build.BuildId) --org $(System.CollectionUri) -p $(System.TeamProject) }
    displayName: Clean Up Tags
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

- deployment: release_resco_integrations
  displayName: Release Resco Integrations
  dependsOn: build_resco_integrations
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  environment: Resco Cloud
  pool:
    vmImage: ubuntu-latest
  variables:
    AppVersion: $[ dependencies.build_resco_integrations.outputs['setup.AppVersion'] ]
  strategy:
    runOnce:
      deploy:
        steps:
        - download: current
          displayName: Download App
          patterns: "**/*.app"

        - bash: for f in $(find . -name "*.app"); do pushd $(dirname $f) && zip $(Build.ArtifactStagingDirectory)/$(basename -s .app $f).zip $(basename $f) && popd; done
          displayName: Prepare App Assets
          workingDirectory: $(Pipeline.Workspace)

        - task: GitHubRelease@1
          displayName: Create GitHub Release
          inputs:
            gitHubConnection: Resco GitHub
            repositoryName: Resconet/RescoIntegrations
            action: create
            target: $(Build.SourceVersion)
            tagSource: userSpecifiedTag
            tag: $(AppVersion)
            title: V$(AppVersion)
            assets: $(Build.ArtifactStagingDirectory)/*.zip
            isDraft: true
            changeLogCompareToRelease: lastFullRelease
            changeLogType: issueBased
            changeLogLabels: ''
